// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GdkGL {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Config]
	public class Config : GLib.Object {

		[Obsolete]
		protected Config(GLib.GType gtype) : base(gtype) {}
		public Config(IntPtr raw) : base(raw) {}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_config_new(out int attrib_list);

		public Config (out int attrib_list) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Config)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			owned = true;
			Raw = gdk_gl_config_new(out attrib_list);
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_config_new_by_mode(int mode);

		public Config (GdkGL.ConfigMode mode) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Config)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			owned = true;
			Raw = gdk_gl_config_new_by_mode((int) mode);
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_config_new_by_mode_for_screen(IntPtr screen, int mode);

		public Config (Gdk.Screen screen, GdkGL.ConfigMode mode) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Config)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			owned = true;
			Raw = gdk_gl_config_new_by_mode_for_screen(screen == null ? IntPtr.Zero : screen.Handle, (int) mode);
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_config_new_for_screen(IntPtr screen, out int attrib_list);

		public Config (Gdk.Screen screen, out int attrib_list) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Config)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			owned = true;
			Raw = gdk_gl_config_new_for_screen(screen == null ? IntPtr.Zero : screen.Handle, out attrib_list);
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_config_get_visual(IntPtr raw);

		public Gdk.Visual Visual { 
			get {
				IntPtr raw_ret = gdk_gl_config_get_visual(Handle);
				Gdk.Visual ret = GLib.Object.GetObject(raw_ret) as Gdk.Visual;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_gl_config_has_alpha(IntPtr raw);

		public bool HasAlpha { 
			get {
				bool raw_ret = gdk_gl_config_has_alpha(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_gl_config_is_rgba(IntPtr raw);

		public bool IsRgba { 
			get {
				bool raw_ret = gdk_gl_config_is_rgba(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_gl_config_get_layer_plane(IntPtr raw);

		public int LayerPlane { 
			get {
				int raw_ret = gdk_gl_config_get_layer_plane(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_gl_config_get_attrib(IntPtr raw, int attribute, out int value);

		public bool GetAttrib(int attribute, out int value) {
			bool raw_ret = gdk_gl_config_get_attrib(Handle, attribute, out value);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_gl_config_get_n_sample_buffers(IntPtr raw);

		public int NSampleBuffers { 
			get {
				int raw_ret = gdk_gl_config_get_n_sample_buffers(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_config_get_screen(IntPtr raw);

		public Gdk.Screen Screen { 
			get {
				IntPtr raw_ret = gdk_gl_config_get_screen(Handle);
				Gdk.Screen ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_config_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_gl_config_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_gl_config_has_accum_buffer(IntPtr raw);

		public bool HasAccumBuffer { 
			get {
				bool raw_ret = gdk_gl_config_has_accum_buffer(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_config_get_colormap(IntPtr raw);

		public Gdk.Colormap Colormap { 
			get {
				IntPtr raw_ret = gdk_gl_config_get_colormap(Handle);
				Gdk.Colormap ret = GLib.Object.GetObject(raw_ret) as Gdk.Colormap;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_gl_config_has_depth_buffer(IntPtr raw);

		public bool HasDepthBuffer { 
			get {
				bool raw_ret = gdk_gl_config_has_depth_buffer(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_gl_config_get_depth(IntPtr raw);

		public int Depth { 
			get {
				int raw_ret = gdk_gl_config_get_depth(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_gl_config_is_double_buffered(IntPtr raw);

		public bool IsDoubleBuffered { 
			get {
				bool raw_ret = gdk_gl_config_is_double_buffered(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_gl_config_get_n_aux_buffers(IntPtr raw);

		public int NAuxBuffers { 
			get {
				int raw_ret = gdk_gl_config_get_n_aux_buffers(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_gl_config_is_stereo(IntPtr raw);

		public bool IsStereo { 
			get {
				bool raw_ret = gdk_gl_config_is_stereo(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_gl_config_has_stencil_buffer(IntPtr raw);

		public bool HasStencilBuffer { 
			get {
				bool raw_ret = gdk_gl_config_has_stencil_buffer(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}


		static Config ()
		{
			GtkSharp.GdkglSharp.ObjectManager.Initialize ();
		}
#endregion
	}

	internal class ConfigAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_config_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_gl_config_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
