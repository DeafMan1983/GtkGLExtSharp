// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GdkGL {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[Context]
	public class Context : GLib.Object {

		[Obsolete]
		protected Context(GLib.GType gtype) : base(gtype) {}
		public Context(IntPtr raw) : base(raw) {}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_context_new(IntPtr gldrawable, IntPtr share_list, bool direct, int render_type);

		public Context (GdkGL.Drawable gldrawable, GdkGL.Context share_list, bool direct, int render_type) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Context)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			owned = true;
			Raw = gdk_gl_context_new(gldrawable == null ? IntPtr.Zero : gldrawable.Handle, share_list == null ? IntPtr.Zero : share_list.Handle, direct, render_type);
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_context_get_gl_drawable(IntPtr raw);

		public GdkGL.Drawable GlDrawable { 
			get {
				IntPtr raw_ret = gdk_gl_context_get_gl_drawable(Handle);
				GdkGL.Drawable ret = GdkGL.DrawableAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_context_get_gl_config(IntPtr raw);

		public GdkGL.Config GlConfig { 
			get {
				IntPtr raw_ret = gdk_gl_context_get_gl_config(Handle);
				GdkGL.Config ret = GLib.Object.GetObject(raw_ret) as GdkGL.Config;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gdk_gl_context_get_render_type(IntPtr raw);

		public int RenderType { 
			get {
				int raw_ret = gdk_gl_context_get_render_type(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_gl_context_copy(IntPtr raw, IntPtr src, uint mask);

		public bool Copy(GdkGL.Context src, uint mask) {
			bool raw_ret = gdk_gl_context_copy(Handle, src == null ? IntPtr.Zero : src.Handle, mask);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_context_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_gl_context_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_context_get_current();

		public static GdkGL.Context Current { 
			get {
				IntPtr raw_ret = gdk_gl_context_get_current();
				GdkGL.Context ret = GLib.Object.GetObject(raw_ret) as GdkGL.Context;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_context_get_share_list(IntPtr raw);

		public GdkGL.Context ShareList { 
			get {
				IntPtr raw_ret = gdk_gl_context_get_share_list(Handle);
				GdkGL.Context ret = GLib.Object.GetObject(raw_ret) as GdkGL.Context;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gl_context_destroy(IntPtr raw);

		public void Destroy() {
			gdk_gl_context_destroy(Handle);
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_gl_context_is_direct(IntPtr raw);

		public bool IsDirect { 
			get {
				bool raw_ret = gdk_gl_context_is_direct(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}


		static Context ()
		{
			GtkSharp.GdkglSharp.ObjectManager.Initialize ();
		}
#endregion
	}

	internal class ContextAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_context_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_gl_context_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
