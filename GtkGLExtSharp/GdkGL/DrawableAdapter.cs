// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GdkGL {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class DrawableAdapter : GLib.GInterfaceAdapter, GdkGL.Drawable {

		static DrawableIface iface;

		struct DrawableIface {
			public IntPtr gtype;
			public IntPtr itype;

		}

		static DrawableAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(DrawableAdapter));
		}

		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			DrawableIface native_iface = Marshal.PtrToStructure<DrawableIface> (ifaceptr);
			Marshal.StructureToPtr<DrawableIface> (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public DrawableAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		DrawableImplementor implementor;

		public DrawableAdapter (DrawableImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			this.implementor = implementor;
		}

		public DrawableAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_drawable_get_type();

		private static GLib.GType _gtype = new GLib.GType (gdk_gl_drawable_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Drawable GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Drawable GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is DrawableImplementor)
				return new DrawableAdapter (obj as DrawableImplementor);
			else if (obj as Drawable == null)
				return new DrawableAdapter (obj.Handle);
			else
				return obj as Drawable;
		}

		public DrawableImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_drawable_get_gl_config(IntPtr raw);

		public GdkGL.Config GlConfig { 
			get {
				IntPtr raw_ret = gdk_gl_drawable_get_gl_config(Handle);
				GdkGL.Config ret = GLib.Object.GetObject(raw_ret) as GdkGL.Config;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gl_drawable_wait_gdk(IntPtr raw);

		public void WaitGdk() {
			gdk_gl_drawable_wait_gdk(Handle);
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gl_drawable_wait_gl(IntPtr raw);

		public void WaitGl() {
			gdk_gl_drawable_wait_gl(Handle);
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_drawable_get_current();

		public static GdkGL.Drawable Current { 
			get {
				IntPtr raw_ret = gdk_gl_drawable_get_current();
				GdkGL.Drawable ret = GdkGL.DrawableAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_gl_drawable_gl_begin(IntPtr raw, IntPtr glcontext);

		public bool GlBegin(GdkGL.Context glcontext) {
			bool raw_ret = gdk_gl_drawable_gl_begin(Handle, glcontext == null ? IntPtr.Zero : glcontext.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_gl_drawable_is_double_buffered(IntPtr raw);

		public bool IsDoubleBuffered { 
			get {
				bool raw_ret = gdk_gl_drawable_is_double_buffered(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gl_drawable_get_size(IntPtr raw, out int width, out int height);

		public void GetSize(out int width, out int height) {
			gdk_gl_drawable_get_size(Handle, out width, out height);
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gdk_gl_drawable_make_current(IntPtr raw, IntPtr glcontext);

		public bool MakeCurrent(GdkGL.Context glcontext) {
			bool raw_ret = gdk_gl_drawable_make_current(Handle, glcontext == null ? IntPtr.Zero : glcontext.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gl_drawable_gl_end(IntPtr raw);

		public void GlEnd() {
			gdk_gl_drawable_gl_end(Handle);
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gl_drawable_swap_buffers(IntPtr raw);

		public void SwapBuffers() {
			gdk_gl_drawable_swap_buffers(Handle);
		}

#endregion
	}
}
