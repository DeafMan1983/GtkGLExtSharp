// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GdkGL {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Font {

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_font_use_pango_font(IntPtr font_desc, int first, int count, int list_base);

		public static Pango.Font UsePangoFont(Pango.FontDescription font_desc, int first, int count, int list_base) {
			IntPtr raw_ret = gdk_gl_font_use_pango_font(font_desc == null ? IntPtr.Zero : font_desc.Handle, first, count, list_base);
			Pango.Font ret = GLib.Object.GetObject(raw_ret) as Pango.Font;
			return ret;
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_font_use_pango_font_for_display(IntPtr display, IntPtr font_desc, int first, int count, int list_base);

		public static Pango.Font UsePangoFontForDisplay(Gdk.Display display, Pango.FontDescription font_desc, int first, int count, int list_base) {
			IntPtr raw_ret = gdk_gl_font_use_pango_font_for_display(display == null ? IntPtr.Zero : display.Handle, font_desc == null ? IntPtr.Zero : font_desc.Handle, first, count, list_base);
			Pango.Font ret = GLib.Object.GetObject(raw_ret) as Pango.Font;
			return ret;
		}

#endregion
	}
}
