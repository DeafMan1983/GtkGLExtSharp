// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GdkGL {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GlPixmap]
	public class GlPixmap : Gdk.Drawable {

		[Obsolete]
		protected GlPixmap(GLib.GType gtype) : base(gtype) {}
		public GlPixmap(IntPtr raw) : base(raw) {}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_pixmap_new(IntPtr glconfig, IntPtr pixmap, out int attrib_list);

		public GlPixmap (GdkGL.Config glconfig, Gdk.Pixmap pixmap, out int attrib_list) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GlPixmap)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			owned = true;
			Raw = gdk_gl_pixmap_new(glconfig == null ? IntPtr.Zero : glconfig.Handle, pixmap == null ? IntPtr.Zero : pixmap.Handle, out attrib_list);
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_pixmap_get_pixmap(IntPtr raw);

		public Gdk.Pixmap Pixmap { 
			get {
				IntPtr raw_ret = gdk_gl_pixmap_get_pixmap(Handle);
				Gdk.Pixmap ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixmap;
				return ret;
			}
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gdk_gl_pixmap_destroy(IntPtr raw);

		public void Destroy() {
			gdk_gl_pixmap_destroy(Handle);
		}

		[DllImport("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_pixmap_get_type();

		static GLib.GType _gtype = new GLib.GType (gdk_gl_pixmap_get_type());
		public static new GLib.GType GType { 
			get {
								return _gtype;
			}
		}


		static GlPixmap ()
		{
			GtkSharp.GdkglSharp.ObjectManager.Initialize ();
		}
#endregion
	}

	internal class GlPixmapAttribute : GLib.GTypeTypeAttribute {
		[DllImport ("libgdkglext-win32-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gdk_gl_pixmap_get_type ();

		private static GLib.GType _gtype = new GLib.GType (gdk_gl_pixmap_get_type ());
		public static GLib.GType GType { get { return _gtype; } }
		public override GLib.GType Type { get { return _gtype; } }

	}
}
